/* front.c - a lexical analyzer system for simple arithmetic expressions */
#include <stdio.h>
#include <ctype.h>

/* Global declarations */
/* Variables */
int charClass;              // Character class
char lexeme[100];           // Array to hold the current lexeme
char nextChar;              // Next character to be processed
int lexLen;                 // Length of the current lexeme
int token;                  // Current token
int nextToken;              // Next token to be returned
FILE *in_fp, *fopen();      // File pointer for input file

/* Function declarations */
void addChar();             // Function to add nextChar to lexeme
void getChar();             // Function to get the next character of input
void getNonBlank();         // Function to skip whitespace characters
int lex();                  // Lexical analyzer function

/* Character classes */
#define LETTER 0            // Character class for letters
#define DIGIT 1             // Character class for digits
#define UNKNOWN 99          // Character class for unknown characters

/* Token codes */
#define INT_LIT 10          // Token code for integer literals
#define IDENT 11            // Token code for identifiers
#define ASSIGN_OP 20        // Token code for assignment operator
#define ADD_OP 21           // Token code for addition operator
#define SUB_OP 22           // Token code for subtraction operator
#define MULT_OP 23          // Token code for multiplication operator
#define DIV_OP 24           // Token code for division operator
#define LEFT_PAREN 25       // Token code for left parenthesis
#define RIGHT_PAREN 26      // Token code for right parenthesis

/******************************************************/
/* main driver */
int main() {
/* Open the input data file and process its contents */
if ((in_fp = fopen("front.in", "r")) == NULL) {
printf("ERROR - cannot open front.in \n");
} else {
getChar(); // Get the first character from the input file
do {
lex();  // Call the lexical analyzer
} while (nextToken != EOF); // Continue until EOF is reached
}
return 0;
}

/******************************************************/
/* lookup - a function to lookup operators and parentheses and return the token */
int lookup(char ch) {
switch (ch) {
case '(': addChar(); nextToken = LEFT_PAREN; break;
case ')': addChar(); nextToken = RIGHT_PAREN; break;
case '+': addChar(); nextToken = ADD_OP; break;
case '-': addChar(); nextToken = SUB_OP; break;
case '*': addChar(); nextToken = MULT_OP; break;
case '/': addChar(); nextToken = DIV_OP; break;
default:  addChar(); nextToken = EOF; break;
}
return nextToken;
}

/******************************************************/
/* addChar - a function to add nextChar to lexeme */
void addChar() {
if (lexLen <= 98) {
lexeme[lexLen++] = nextChar;
lexeme[lexLen] = 0;
} else {
printf("Error - lexeme is too long \n");
}
}

/******************************************************/
/* getChar - a function to get the next character of input and determine its character class */
void getChar() {
if ((nextChar = getc(in_fp)) != EOF) {
if (isalpha(nextChar)) {
charClass = LETTER;
} else if (isdigit(nextChar)) {
charClass = DIGIT;
} else {
charClass = UNKNOWN;
}
} else {
charClass = EOF;
}
}

/******************************************************/
/* getNonBlank - a function to call getChar until it returns a non-whitespace character */
void getNonBlank() {
while (isspace(nextChar)) {
getChar();
}
}

/******************************************************/
/* lex - a simple lexical analyzer for arithmetic expressions */
int lex() {
lexLen = 0;
getNonBlank();
switch (charClass) {
/* Parse identifiers */
case LETTER:
addChar();
getChar();
while (charClass == LETTER || charClass == DIGIT) {
addChar();
getChar();
}
nextToken = IDENT;
break;

/* Parse integer literals */
case DIGIT:
addChar();
getChar();
while (charClass == DIGIT) {
addChar();
getChar();
}
nextToken = INT_LIT;
break;

/* Parentheses and operators */
case UNKNOWN:
lookup(nextChar);
getChar();
break;

/* EOF */
case EOF:
nextToken = EOF;
lexeme[0] = 'E';
lexeme[1] = 'O';
lexeme[2] = 'F';
lexeme[3] = 0;
break;
}

printf("Next token is: %d, Next lexeme is %s\n", nextToken, lexeme);
return nextToken;
}
/* End of function lex */
value = x1 + 15 / y2 - 7
